# from flask import Flask, request
# import requests

# app = Flask(__name__)

# TELEGRAM_BOT_TOKEN = '7637391486:AAEYarDrhPKUkWzsoteS3yiVgB5QeiZdKoI'
# CHAT_ID = '-4708928215'

# # Route ch√≠nh "/" ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu t·ª´ UptimeRobot
# @app.route('/')
# def index():
#     return "App is running!", 200  # Tr·∫£ v·ªÅ th√¥ng b√°o x√°c nh·∫≠n app ho·∫°t ƒë·ªông

# # Route "/webhook" ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu t·ª´ TradingView ho·∫∑c c√°c ngu·ªìn kh√°c
# @app.route('/webhook', methods=['POST', 'GET', 'HEAD'])
# def webhook():
#     # X·ª≠ l√Ω y√™u c·∫ßu POST (d√†nh cho webhook t·ª´ TradingView)
#     if request.method == 'POST':
#         try:
#             if request.is_json:
#                 data = request.get_json(force=True)
#             else:
#                 data = {"message": request.data.decode('utf-8')}  # Gi·∫£i m√£ text raw
#             print("Received data:", data)
#             message = data.get('message', 'No message received')
#         except Exception as e:
#             print("Error parsing JSON:", str(e))
#             return "Invalid JSON", 400

#         send_message_to_telegram(message)
#         return "Webhook received", 200

#     # X·ª≠ l√Ω y√™u c·∫ßu GET v√† HEAD (d√†nh cho UptimeRobot)
#     return "Webhook is running!", 200

# # H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram
# def send_message_to_telegram(message):
#     url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
#     payload = {
#         'chat_id': CHAT_ID,
#         'text': message
#     }
#     response = requests.post(url, json=payload)
#     if response.status_code == 200:
#         print("Message sent successfully!")
#     else:
#         print(f"Failed to send message: {response.text}")

# if __name__ == '__main__':
#     app.run(port=5000)


from flask import Flask, request
import requests
import threading
import time

app = Flask(__name__)

# Token bot ch√≠nh v√† bot ph·ª•
MAIN_BOT_TOKEN = '7637391486:AAEYarDrhPKUkWzsoteS3yiVgB5QeiZdKoI'
SECONDARY_BOT_TOKEN = '7466054301:AAGexBfB5pNbwmnHP1ocC9jICxR__GSNgOA'
CHAT_ID = '-4708928215'

# L∆∞u tr·∫°ng th√°i t√≠n hi·ªáu theo c·∫∑p giao d·ªãch
signals = {}

@app.route('/')
def index():
    return "App is running!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.is_json:
            data = request.get_json(force=True)
        else:
            data = {"message": request.data.decode('utf-8')}
        
        print("üì© Nh·∫≠n d·ªØ li·ªáu:", data)
        message = data.get('message', 'No message received')

        send_message_to_telegram(MAIN_BOT_TOKEN, message)  # G·ª≠i t√≠n hi·ªáu ngay

        # L·∫•y c·∫∑p giao d·ªãch t·ª´ tin nh·∫Øn
        symbol = message.split(":")[1].strip()

        # N·∫øu ƒë√£ c√≥ t√≠n hi·ªáu tr∆∞·ªõc ƒë√≥ th√¨ reset b·ªô ƒë·∫øm
        if symbol in signals:
            print(f"üîÑ {symbol} c√≥ t√≠n hi·ªáu m·ªõi, reset b·ªô ƒë·∫øm!")
            signals[symbol]["count"] = 0  # Reset ƒë·∫øm
            signals[symbol]["new_signal"] = True  # ƒê√°nh d·∫•u c√≥ t√≠n hi·ªáu m·ªõi
        else:
            signals[symbol] = {"count": 0, "new_signal": True}  # T·∫°o m·ªõi t√≠n hi·ªáu

    except Exception as e:
        print("‚ùå L·ªói JSON:", str(e))
        return "Invalid JSON", 400

    return "Webhook received", 200

def send_message_to_telegram(bot_token, message):
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {'chat_id': CHAT_ID, 'text': message}
    response = requests.post(url, json=payload)

    if response.status_code == 200:
        print(f"üì§ G·ª≠i tin nh·∫Øn th√†nh c√¥ng: {message}")
    else:
        print(f"‚ùå L·ªói g·ª≠i tin ({bot_token}): {response.status_code}, {response.text}")

def update_candles():
    print("‚úÖ Bot ph·ª• ƒë√£ kh·ªüi ƒë·ªông v√† b·∫Øt ƒë·∫ßu theo d√µi n·∫øn...")
    while True:
        if signals:
            print("‚è≥ Ki·ªÉm tra tr·∫°ng th√°i c√°c c·∫∑p ti·ªÅn...", signals)

        for symbol in list(signals.keys()):
            signals[symbol]["count"] += 1
            print(f"üîÑ {symbol}: {signals[symbol]['count']} n·∫øn ƒë√£ qua")

            # N·∫øu c√≥ t√≠n hi·ªáu m·ªõi th√¨ reset ƒë·∫øm
            if signals[symbol]["new_signal"]:
                print(f"‚ö° {symbol} c√≥ t√≠n hi·ªáu m·ªõi trong n·∫øn n√†y! Reset l·∫°i b·ªô ƒë·∫øm.")
                signals[symbol]["count"] = 0
                signals[symbol]["new_signal"] = False  # ƒê√°nh d·∫•u t√≠n hi·ªáu ƒë√£ x·ª≠ l√Ω
                continue  # B·ªè qua ki·ªÉm tra huy ch∆∞∆°ng

            # Ki·ªÉm tra n·∫øn 1 sau t√≠n hi·ªáu
            if signals[symbol]["count"] == 1:
                send_message_to_telegram(SECONDARY_BOT_TOKEN, f"ü•á Huy ch∆∞∆°ng 1 cho {symbol}")
                print(f"üì§ G·ª≠i huy ch∆∞∆°ng 1 cho {symbol}")

            # Ki·ªÉm tra n·∫øn 2 sau t√≠n hi·ªáu
            elif signals[symbol]["count"] == 2:
                send_message_to_telegram(SECONDARY_BOT_TOKEN, f"ü•à Huy ch∆∞∆°ng 2 cho {symbol}")
                print(f"üì§ G·ª≠i huy ch∆∞∆°ng 2 cho {symbol}")
                del signals[symbol]  # X√≥a kh·ªèi danh s√°ch theo d√µi

        time.sleep(60)  # Ch·ªù 1 ph√∫t (1 n·∫øn M1)

# Ch·∫°y c·∫≠p nh·∫≠t n·∫øn song song
threading.Thread(target=update_candles, daemon=True).start()
print("‚úÖ Bot ch√≠nh ƒë√£ kh·ªüi ƒë·ªông!")

if __name__ == '__main__':
    app.run(port=5000)

