# from flask import Flask, request
# import requests

# app = Flask(__name__)

# TELEGRAM_BOT_TOKEN = '7637391486:AAEYarDrhPKUkWzsoteS3yiVgB5QeiZdKoI'
# CHAT_ID = '-4708928215'

# # Route ch√≠nh "/" ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu t·ª´ UptimeRobot
# @app.route('/')
# def index():
#     return "App is running!", 200  # Tr·∫£ v·ªÅ th√¥ng b√°o x√°c nh·∫≠n app ho·∫°t ƒë·ªông

# # Route "/webhook" ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu t·ª´ TradingView ho·∫∑c c√°c ngu·ªìn kh√°c
# @app.route('/webhook', methods=['POST', 'GET', 'HEAD'])
# def webhook():
#     # X·ª≠ l√Ω y√™u c·∫ßu POST (d√†nh cho webhook t·ª´ TradingView)
#     if request.method == 'POST':
#         try:
#             if request.is_json:
#                 data = request.get_json(force=True)
#             else:
#                 data = {"message": request.data.decode('utf-8')}  # Gi·∫£i m√£ text raw
#             print("Received data:", data)
#             message = data.get('message', 'No message received')
#         except Exception as e:
#             print("Error parsing JSON:", str(e))
#             return "Invalid JSON", 400

#         send_message_to_telegram(message)
#         return "Webhook received", 200

#     # X·ª≠ l√Ω y√™u c·∫ßu GET v√† HEAD (d√†nh cho UptimeRobot)
#     return "Webhook is running!", 200

# # H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram
# def send_message_to_telegram(message):
#     url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
#     payload = {
#         'chat_id': CHAT_ID,
#         'text': message
#     }
#     response = requests.post(url, json=payload)
#     if response.status_code == 200:
#         print("Message sent successfully!")
#     else:
#         print(f"Failed to send message: {response.text}")

# if __name__ == '__main__':
#     app.run(port=5000)



from flask import Flask, request
import requests
import time
import threading

app = Flask(__name__)

# Token bot ch√≠nh v√† bot ph·ª•
MAIN_BOT_TOKEN = '7637391486:AAEYarDrhPKUkWzsoteS3yiVgB5QeiZdKoI'
SECONDARY_BOT_TOKEN = '7466054301:AAGexBfB5pNbwmnHP1ocC9jICxR__GSNgOA'  # Bot ph·ª• ƒë·ªÉ g·ª≠i huy ch∆∞∆°ng
CHAT_ID = '-4708928215'

# Th·ªùi gian c·ªßa 1 n·∫øn 15 ph√∫t (t√≠nh b·∫±ng gi√¢y)
ONE_CANDLE = 60  # 15 ph√∫t = 900 gi√¢y
TWO_CANDLES = 2 * ONE_CANDLE  # 30 ph√∫t = 1800 gi√¢y

# B·ªô nh·ªõ l∆∞u t√≠n hi·ªáu v√† tr·∫°ng th√°i g·ª≠i huy ch∆∞∆°ng
signals = {}

@app.route('/')
def index():
    return "App is running!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.is_json:
            data = request.get_json(force=True)
        else:
            data = {"message": request.data.decode('utf-8')}  # Gi·∫£i m√£ text raw
        
        print("Received data:", data)
        message = data.get('message', 'No message received')
        send_message_to_telegram(MAIN_BOT_TOKEN, message)

        # L·∫•y c·∫∑p giao d·ªãch t·ª´ tin nh·∫Øn (c√≥ th·ªÉ ch·ªânh l·∫°i n·∫øu format kh√°c)
        symbol = message.split(":")[1].strip()  

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i t√≠n hi·ªáu
        current_time = time.time()
        signals[symbol] = {
            "time": current_time,
            "sent_ü•á": False,
            "sent_ü•à": False
        }

    except Exception as e:
        print("Error parsing JSON:", str(e))
        return "Invalid JSON", 400

    return "Webhook received", 200

# H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram
def send_message_to_telegram(bot_token, message):
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {'chat_id': CHAT_ID, 'text': message}
    response = requests.post(url, json=payload)
    if response.status_code == 200:
        print(f"Message sent successfully via bot {bot_token}!")
    else:
        print(f"Failed to send message: {response.text}")

# Ki·ªÉm tra v√† g·ª≠i huy ch∆∞∆°ng n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
def check_signals():
    while True:
        current_time = time.time()
        
        for symbol in list(signals.keys()):
            elapsed_time = current_time - signals[symbol]["time"]
            
            # N·∫øu sau 15 ph√∫t kh√¥ng c√≥ t√≠n hi·ªáu m·ªõi -> G·ª≠i huy ch∆∞∆°ng ü•á
            if elapsed_time > ONE_CANDLE and not signals[symbol]["sent_ü•á"]:
                send_message_to_telegram(SECONDARY_BOT_TOKEN, f"ü•á Huy ch∆∞∆°ng 1 cho {symbol}")
                signals[symbol]["sent_ü•á"] = True
            
            # N·∫øu sau 30 ph√∫t kh√¥ng c√≥ t√≠n hi·ªáu m·ªõi -> G·ª≠i huy ch∆∞∆°ng ü•à v√† x√≥a t√≠n hi·ªáu
            if elapsed_time > TWO_CANDLES and not signals[symbol]["sent_ü•à"]:
                send_message_to_telegram(SECONDARY_BOT_TOKEN, f"ü•à Huy ch∆∞∆°ng 2 cho {symbol}")
                del signals[symbol]  # X√≥a t√≠n hi·ªáu kh·ªèi b·ªô nh·ªõ
        
        time.sleep(10)  # Ki·ªÉm tra m·ªói 10 gi√¢y

# Ch·∫°y ki·ªÉm tra t√≠n hi·ªáu song song
threading.Thread(target=check_signals, daemon=True).start()

if __name__ == '__main__':
    app.run(port=5000)

